#include <iostream>
#include <vector>

using namespace std;

void quickSortMiddle(vector<int> &a, int left, int right) {

    if(left >= right) return;
    
    int leftI = left;
    int rightI = right;
    int pivot = a[left + (right - left)/2]; // set pivot to value
    while(leftI<=rightI)
    {
        while(a[leftI]  < pivot )leftI++;   // use pivot by value
        while(a[rightI] > pivot )rightI--;  // use pivot by value
        if(leftI <=rightI)
        {
            swap(a[leftI], a[rightI]);
            leftI++;
            rightI--;
        }
    }
    if (left < rightI) quickSortMiddle(a,left,rightI); // < not <=
    if (leftI < right) quickSortMiddle(a,leftI,right); // < not <=
}

int main() {

    int N;
    cin >> N;
    vector<int> a(N, 0);
    for (int i = 0; i < N; i++) cin >> a[i];
    
    cout << "Before sorting:" << endl;
    for (int i = 0; i < N; i++) cout << "A[" << i << "] = " << a[i] << endl;
    cout << "----------------" << endl;
    
    quickSortMiddle(a, 0, N-1);
    
    cout << "After sorting:" << endl;
    for (int i = 0; i < N; i++) cout<< "A[" << i << "] = " << a[i] << endl;
    
    // Start counting
    int sum_count = 0;
    int i = 0;
    while (i < N) {
        
        int count_equals = 1;
        int j = i;
        for (j = i+1; j < N; j++) {
            if (a[j] != a[i]) break;
            count_equals += 1;
        }
        
        sum_count += (count_equals-1)*count_equals/2;
        i = j;
    }
    
    cout << "Total pairs: " << sum_count << endl;
    return 0;
}
